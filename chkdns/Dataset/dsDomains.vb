'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsDomains
    Inherits DataSet
    
    Private tableDomains As DomainsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Domains")) Is Nothing) Then
                Me.Tables.Add(New DomainsDataTable(ds.Tables("Domains")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Domains As DomainsDataTable
        Get
            Return Me.tableDomains
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsDomains = CType(MyBase.Clone,dsDomains)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Domains")) Is Nothing) Then
            Me.Tables.Add(New DomainsDataTable(ds.Tables("Domains")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDomains = CType(Me.Tables("Domains"),DomainsDataTable)
        If (Not (Me.tableDomains) Is Nothing) Then
            Me.tableDomains.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsDomains"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsDomains.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDomains = New DomainsDataTable
        Me.Tables.Add(Me.tableDomains)
    End Sub
    
    Private Function ShouldSerializeDomains() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DomainsRowChangeEventHandler(ByVal sender As Object, ByVal e As DomainsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDomainID As DataColumn
        
        Private columnLogSessionID As DataColumn
        
        Private columnDomainName As DataColumn
        
        Private columnComment As DataColumn
        
        Friend Sub New()
            MyBase.New("Domains")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DomainIDColumn As DataColumn
            Get
                Return Me.columnDomainID
            End Get
        End Property
        
        Friend ReadOnly Property LogSessionIDColumn As DataColumn
            Get
                Return Me.columnLogSessionID
            End Get
        End Property
        
        Friend ReadOnly Property DomainNameColumn As DataColumn
            Get
                Return Me.columnDomainName
            End Get
        End Property
        
        Friend ReadOnly Property CommentColumn As DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DomainsRow
            Get
                Return CType(Me.Rows(index),DomainsRow)
            End Get
        End Property
        
        Public Event DomainsRowChanged As DomainsRowChangeEventHandler
        
        Public Event DomainsRowChanging As DomainsRowChangeEventHandler
        
        Public Event DomainsRowDeleted As DomainsRowChangeEventHandler
        
        Public Event DomainsRowDeleting As DomainsRowChangeEventHandler
        
        Public Overloads Sub AddDomainsRow(ByVal row As DomainsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDomainsRow(ByVal LogSessionID As String, ByVal DomainName As String, ByVal Comment As String) As DomainsRow
            Dim rowDomainsRow As DomainsRow = CType(Me.NewRow,DomainsRow)
            rowDomainsRow.ItemArray = New Object() {Nothing, LogSessionID, DomainName, Comment}
            Me.Rows.Add(rowDomainsRow)
            Return rowDomainsRow
        End Function
        
        Public Function FindByDomainID(ByVal DomainID As Integer) As DomainsRow
            Return CType(Me.Rows.Find(New Object() {DomainID}),DomainsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DomainsDataTable = CType(MyBase.Clone,DomainsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DomainsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDomainID = Me.Columns("DomainID")
            Me.columnLogSessionID = Me.Columns("LogSessionID")
            Me.columnDomainName = Me.Columns("DomainName")
            Me.columnComment = Me.Columns("Comment")
        End Sub
        
        Private Sub InitClass()
            Me.columnDomainID = New DataColumn("DomainID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDomainID)
            Me.columnLogSessionID = New DataColumn("LogSessionID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLogSessionID)
            Me.columnDomainName = New DataColumn("DomainName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDomainName)
            Me.columnComment = New DataColumn("Comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComment)
            Me.Constraints.Add(New UniqueConstraint("dsDomainsKey1", New DataColumn() {Me.columnDomainID}, true))
            Me.columnDomainID.AutoIncrement = true
            Me.columnDomainID.AllowDBNull = false
            Me.columnDomainID.ReadOnly = true
            Me.columnDomainID.Unique = true
        End Sub
        
        Public Function NewDomainsRow() As DomainsRow
            Return CType(Me.NewRow,DomainsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DomainsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DomainsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DomainsRowChangedEvent) Is Nothing) Then
                RaiseEvent DomainsRowChanged(Me, New DomainsRowChangeEvent(CType(e.Row,DomainsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DomainsRowChangingEvent) Is Nothing) Then
                RaiseEvent DomainsRowChanging(Me, New DomainsRowChangeEvent(CType(e.Row,DomainsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DomainsRowDeletedEvent) Is Nothing) Then
                RaiseEvent DomainsRowDeleted(Me, New DomainsRowChangeEvent(CType(e.Row,DomainsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DomainsRowDeletingEvent) Is Nothing) Then
                RaiseEvent DomainsRowDeleting(Me, New DomainsRowChangeEvent(CType(e.Row,DomainsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDomainsRow(ByVal row As DomainsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainsRow
        Inherits DataRow
        
        Private tableDomains As DomainsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDomains = CType(Me.Table,DomainsDataTable)
        End Sub
        
        Public Property DomainID As Integer
            Get
                Return CType(Me(Me.tableDomains.DomainIDColumn),Integer)
            End Get
            Set
                Me(Me.tableDomains.DomainIDColumn) = value
            End Set
        End Property
        
        Public Property LogSessionID As String
            Get
                Try 
                    Return CType(Me(Me.tableDomains.LogSessionIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomains.LogSessionIDColumn) = value
            End Set
        End Property
        
        Public Property DomainName As String
            Get
                Try 
                    Return CType(Me(Me.tableDomains.DomainNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomains.DomainNameColumn) = value
            End Set
        End Property
        
        Public Property Comment As String
            Get
                Try 
                    Return CType(Me(Me.tableDomains.CommentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomains.CommentColumn) = value
            End Set
        End Property
        
        Public Function IsLogSessionIDNull() As Boolean
            Return Me.IsNull(Me.tableDomains.LogSessionIDColumn)
        End Function
        
        Public Sub SetLogSessionIDNull()
            Me(Me.tableDomains.LogSessionIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDomainNameNull() As Boolean
            Return Me.IsNull(Me.tableDomains.DomainNameColumn)
        End Function
        
        Public Sub SetDomainNameNull()
            Me(Me.tableDomains.DomainNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tableDomains.CommentColumn)
        End Function
        
        Public Sub SetCommentNull()
            Me(Me.tableDomains.CommentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DomainsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DomainsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DomainsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
